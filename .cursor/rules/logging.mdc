---
globs: *.swift
alwaysApply: false
---

# 📊 iOS Logging & Analytics Rules

## Logging Philosophy

This iOS app uses **Firebase Analytics & Crashlytics** for comprehensive logging, crash reporting, and user flow tracking. The goal is to enable fast iteration by providing real-time insights into user behavior, crashes, and performance issues through a cloud-based dashboard.

## 🎯 Firebase Crashlytics Integration

### Why Firebase Crashlytics?

1. **🚀 Real-time Dashboard**: View logs, crashes, and metrics in browser
2. **📱 Native iOS Support**: Excellent Swift/SwiftUI integration
3. **🔍 User Flow Tracking**: Custom events and breadcrumbs
4. **⚡ Fast Setup**: Minimal configuration required
5. **🎯 Crash Analysis**: Automatic crash grouping and analysis

## 🏗️ Logging Architecture

### Global Logging Functions

```swift
// Simple global functions for quick logging
func logInfo(_ message: String, category: String = "General")
func logWarning(_ message: String, category: String = "General")
func logError(_ error: Error, category: String = "General")
func logUserAction(_ action: String, parameters: [String: Any]? = nil)
```


## 🎯 Logging Patterns

1. User Actions (Critical for Flow Tracking)


2. Error Logging
✅ GOOD: Comprehensive error logging

### 3. Navigation Tracking
✅ GOOD: Track all navigation events


### 4. API Call Tracking
✅ GOOD: Track API calls in services

## 🚨 Crash Reporting

### Automatic Crash Collection

```swift
// ✅ GOOD: Set user context for crash reports
func handleSuccessfulLogin(_ response: AuthResponse) async {
    // Set user identifier for crash reporting
    LoggingManager.shared.setUserIdentifier(response.user.id)
    
    // Set custom keys for better crash analysis
    LoggingManager.shared.setCustomValue(response.user.email, forKey: "user_email")
    LoggingManager.shared.setCustomValue(response.user.needsOnboarding, forKey: "needs_onboarding")
    
    // ... rest of login logic ...
}
```

## 📚 Best Practices

### ✅ DO:

- **Log all user actions** for flow tracking
- **Include relevant parameters** for context
- **Use descriptive action names** for analytics

### ❌ DON'T:

- **Over-log** (avoid logging every minor event)
- **Use inconsistent naming** for actions
- **Ignore error logging** (always log errors)

## 🚀 Benefits for Fast Iteration

This logging setup enables:

- **🔍 Real-time Debugging**: See issues as they happen
- **📊 User Flow Analysis**: Understand what works and what doesn't
- **🔄 Rapid Iteration**: Make data-driven decisions quickly
