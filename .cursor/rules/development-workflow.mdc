---
globs: *.swift
alwaysApply: false
---

# ⚠️ iOS Development Workflow Rules

## Mandatory Workflow Requirements

This document defines **MANDATORY** development practices that must be followed for every code change. These rules ensure code quality and prevent regressions.

### SwiftUI Best Practices (DRY)
1. **Always** Use @ViewBuilder to encapsulate UI sections and reduce repetition.
2. **Always** Structure views logically by breaking them into smaller @ViewBuilder components.

## 🚨 CRITICAL: Build Requirements

### **EVERY Swift File Change Must:**

1. **✅ Build Successfully** (Cmd+B)
3. **✅ Have No Compiler Warnings**
4. **✅ Have No Swift 6 Modern Cuncurrency Errors**

### **Never Deliver Work Without:**
- [ ] Successful build (no compilation errors)
- [ ] Zero compiler warnings

```bash
# Essential commands after EVERY Swift file change:
# 1. Build project
xcodebuild -project MoneyApp.xcodeproj -scheme MoneyApp -destination 'platform=iOS Simulator,name=iPhone 16' build
# MUST SEE: Build Succeeded!!!

# 2. If build fails, grep the top 5 errors and plan steps to fix them
xcodebuild -project MoneyApp.xcodeproj -scheme MoneyApp -destination 'platform=iOS Simulator,name=iPhone 16' build 2>&1 | grep -A 5 -B 5 "error:"

# 3. **ITERATE** Build project again until it succeeds
```

## ⚠️🚨 Must Build Iteratively 🚨⚠️

### When Build Fails
1. **Read error message carefully**
2. **✅ Fix the specific issue**
3. **Build again**
5. **✅ Only continue when build succeeds**
```swift
// Common fixes:
// - Missing imports
// - Type mismatches  
// - Syntax errors
// - Missing protocol conformances
```

## 🎯 Quality Gates

### **MANDATORY** ⚠️ Check Your Work ⚠️

**MANDATORY** Before moving on, verify:

- [ ] Code is organized by feature, not technical layer
- [ ] Models for APIs are always from /Generated `import MoneyAppGenerated`
- [ ] Views only contain SwiftUI UI code
- [ ] ViewModels use @Observable and handle all business logic
- [ ] Services use actors and protocols for proper concurrency
- [ ] No direct API calls in Views
- [ ] Proper async/await usage with Sendable protocols
- [ ] @MainActor on ViewModels
- [ ] @State for ViewModel ownership (not @StateObject)
- [ ] Protocol-based dependency injection for services

### Definition of Done

A feature is complete when:
- [ ] **Build**: Only continue when the build succeeds

## Philosophy

**The goal is fast, confident iteration. These workflows enable:**

- 🚀 **Rapid feedback**: Know immediately if changes break anything
- 🛡️ **Confidence**: Builds ensure errors and deprecations are caught early

**Every minute spent following these workflows saves hours of debugging later.**